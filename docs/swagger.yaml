basePath: /v1
definitions:
  main.CreatePostPayload:
    properties:
      content:
        maxLength: 1000
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 100
        type: string
    required:
    - content
    - title
    type: object
  main.CreateUserTokenPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  main.FollowUnfollowUserPayload:
    properties:
      followID:
        type: string
    required:
    - followID
    type: object
  main.RegisterUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 5
        type: string
      username:
        maxLength: 100
        type: string
    required:
    - email
    - password
    - username
    type: object
  main.ReturnUserID:
    properties:
      userID:
        type: string
    type: object
  main.UpdatePostPayload:
    properties:
      content:
        maxLength: 1000
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 100
        type: string
    type: object
  main.UserResponseType:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      username:
        type: string
      verified:
        type: boolean
    type: object
  store.CreateCommentRow:
    properties:
      created_at:
        type: string
      id:
        type: string
    type: object
  store.CreatePostRow:
    properties:
      created_at:
        type: string
      id:
        type: string
      updated_at:
        type: string
    type: object
  store.GetUserFeedRow:
    properties:
      comments_count:
        type: integer
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  store.Posts:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  store.UpdatePostByIdRow:
    properties:
      id:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for GoSocial, a social networking application.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: GoSocial API
paths:
  /auth/activate/{token}:
    put:
      consumes:
      - application/json
      description: Activate user
      parameters:
      - description: Invite token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Invalid token
          schema: {}
        "500":
          description: Server encountered a problem
          schema: {}
        "502":
          description: Invite token expired
          schema: {}
      summary: Activate user
      tags:
      - auth
  /auth/token:
    post:
      consumes:
      - application/json
      description: Create a Token
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateUserTokenPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Token
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Server encountered a problem
          schema: {}
      summary: Create a Token
      tags:
      - auth
  /auth/user:
    post:
      consumes:
      - application/json
      description: Registers user
      parameters:
      - description: User Signup detailes
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.ReturnUserID'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Invalid Credentials
          schema: {}
        "409":
          description: User Already Verified
          schema: {}
        "500":
          description: Server encountered a problem
          schema: {}
      summary: Register user
      tags:
      - auth
  /health:
    get:
      description: Check server health
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Server encountered a problem
          schema: {}
      summary: Health endpoint
      tags:
      - health
  /posts:
    post:
      consumes:
      - application/json
      description: Creates new posts
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: Create Post Params
        in: body
        name: CreatePost
        required: true
        schema:
          $ref: '#/definitions/main.CreatePostPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.CreatePostRow'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Server encountered a problem
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a Post
      tags:
      - posts
  /posts/{postID}:
    delete:
      consumes:
      - application/json
      description: Deletes post by id
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Record Not Found
          schema: {}
        "500":
          description: Server encountered a problem
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Delete Post
      tags:
      - posts
    get:
      consumes:
      - application/json
      description: Fetch post by id
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.Posts'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Record Not Found
          schema: {}
        "500":
          description: Server encountered a problem
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetch Post
      tags:
      - posts
    patch:
      consumes:
      - application/json
      description: Fetch post by id
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      - description: Update Post Params
        in: body
        name: updatePost
        required: true
        schema:
          $ref: '#/definitions/main.UpdatePostPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.UpdatePostByIdRow'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Server encountered a problem
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetch Post
      tags:
      - posts
  /posts/{postID}/comments:
    post:
      consumes:
      - application/json
      description: Create comment on posts
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: string
      - description: Content
        in: body
        name: content
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.CreateCommentRow'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Server encountered a problem
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create Comment
      tags:
      - posts
  /users/{userID}:
    get:
      consumes:
      - application/json
      description: Fetches user profile by id
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.UserResponseType'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Record Not Found
          schema: {}
        "500":
          description: Server encountered a problem
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches user profile
      tags:
      - users
  /users/feed:
    get:
      consumes:
      - application/json
      description: Fetches user feed with following posts
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.GetUserFeedRow'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Server encountered a problem
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Fetches user feed
      tags:
      - feed
  /users/follow:
    put:
      consumes:
      - application/json
      description: Sets Follow user
      parameters:
      - description: Follow User Payload
        in: body
        name: followUser
        required: true
        schema:
          $ref: '#/definitions/main.FollowUnfollowUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Server encountered a problem
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Follows a user
      tags:
      - users
  /users/unfollow:
    put:
      consumes:
      - application/json
      description: Sets Unfollow user
      parameters:
      - description: Unfollow User Payload
        in: body
        name: unfollowUser
        required: true
        schema:
          $ref: '#/definitions/main.FollowUnfollowUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Server encountered a problem
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Unfollows a user
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
swagger: "2.0"
