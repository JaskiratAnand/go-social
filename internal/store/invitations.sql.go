// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: invitations.sql

package store

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createInvitation = `-- name: CreateInvitation :exec
INSERT 
INTO user_invitations (token, user_id, expiary)
VALUES ($1, $2, $3)
ON CONFLICT (user_id) 
DO UPDATE SET token = $1, expiary = $3
RETURNING token
`

type CreateInvitationParams struct {
	Token   uuid.UUID `json:"token"`
	UserID  uuid.UUID `json:"user_id"`
	Expiary time.Time `json:"expiary"`
}

func (q *Queries) CreateInvitation(ctx context.Context, arg CreateInvitationParams) error {
	_, err := q.db.ExecContext(ctx, createInvitation, arg.Token, arg.UserID, arg.Expiary)
	return err
}

const deleteInvitationByUserId = `-- name: DeleteInvitationByUserId :exec
DELETE
FROM user_invitations
WHERE user_id = $1
`

func (q *Queries) DeleteInvitationByUserId(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteInvitationByUserId, userID)
	return err
}

const getInvitationByToken = `-- name: GetInvitationByToken :one
SELECT token, user_id, expiary
FROM user_invitations
WHERE token = $1
LIMIT 1
`

func (q *Queries) GetInvitationByToken(ctx context.Context, token uuid.UUID) (UserInvitations, error) {
	row := q.db.QueryRowContext(ctx, getInvitationByToken, token)
	var i UserInvitations
	err := row.Scan(&i.Token, &i.UserID, &i.Expiary)
	return i, err
}
