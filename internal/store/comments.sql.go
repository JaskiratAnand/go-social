// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comments.sql

package store

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createComment = `-- name: CreateComment :one
INSERT 
INTO comments (post_id, user_id, content) 
VALUES ($1, $2, $3)
RETURNING id, created_at
`

type CreateCommentParams struct {
	PostID  uuid.UUID `json:"post_id"`
	UserID  uuid.UUID `json:"user_id"`
	Content string    `json:"content"`
}

type CreateCommentRow struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (CreateCommentRow, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.PostID, arg.UserID, arg.Content)
	var i CreateCommentRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const getCommentsByPostId = `-- name: GetCommentsByPostId :many
SELECT c.id, c.content, c.created_at, c.user_id, u.username 
FROM comments c
JOIN users u ON u.id = c.user_id
WHERE c.post_id = $1
ORDER BY c.created_at DESC
`

type GetCommentsByPostIdRow struct {
	ID        uuid.UUID `json:"id"`
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	UserID    uuid.UUID `json:"user_id"`
	Username  string    `json:"username"`
}

func (q *Queries) GetCommentsByPostId(ctx context.Context, postID uuid.UUID) ([]GetCommentsByPostIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByPostId, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCommentsByPostIdRow
	for rows.Next() {
		var i GetCommentsByPostIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.CreatedAt,
			&i.UserID,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
